<ResourceDictionary x:Class="AA2Lib.SharedResources" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:local="clr-namespace:AA2Lib"
                    xmlns:converters="clr-namespace:AA2Lib.Converters"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="d"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns:dataBlocks="clr-namespace:AA2Lib.Code.DataBlocks"
                    xmlns:controls="clr-namespace:AA2Lib.Controls"
                    xmlns:system="clr-namespace:System;assembly=mscorlib">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary
            Source="pack://application:,,,/PresentationFramework.Aero;v4.0.0.0;31bf3856ad364e35;Component\themes\aero.normalcolor.xaml" />
    </ResourceDictionary.MergedDictionaries>
    <!-- Region Misc -->
    <converters:NumericStringConverter NumberType="Byte" x:Key="ByteConverter" />
    <converters:NumericStringConverter NumberType="Int16" x:Key="Int16Converter" />
    <converters:NumericStringConverter NumberType="Int32" x:Key="Int32Converter" />
    <!-- End Region -->
    <!-- Region Styles -->
    <Style x:Key="SliderStyle" TargetType="{x:Type Slider}" BasedOn="{StaticResource {x:Type Slider}}"
           d:DataContext="{d:DesignInstance Type=dataBlocks:DataBlockWrapper}">
        <Setter Property="Ticks" Value="{Binding Path=RangedThresholds}" />
        <Setter Property="TickPlacement" Value="BottomRight" />
    </Style>
    <Style x:Key="SliderTextBoxStyle" TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}"
           d:DataContext="{d:DesignInstance Type=dataBlocks:DataBlockWrapper}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=Warning}" Value="True">
                <Setter Property="Background">
                    <Setter.Value>
                        <ImageBrush ImageSource="Resources/warning.png" TileMode="None" Stretch="None"
                                    AlignmentX="Right" AlignmentY="Top" />
                    </Setter.Value>
                </Setter>
                <Setter Property="ToolTip">
                    <Setter.Value>
                        <TextBlock>
                            Over Threshold. Unexpected Results may Occur.
                            <LineBreak />
                            Values Over Threshold Get Reset by Illusion Editor upon Loading.
                        </TextBlock>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>

    </Style>
    <Style x:Key="TextBoxStyle" TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
        <Style.Triggers>
            <Trigger Property="IsReadOnly" Value="True">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TextBox}">
                            <TextBlock Text="{TemplateBinding Text}" Margin="4,2" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!-- End Region -->

    <!-- Region DataTemplates -->
    <!-- Region String -->
    <DataTemplate x:Key="{x:Static local:SharedResources+DataTemplates.StringDataTemplateKey}">
        <TextBox d:DataContext="{d:DesignInstance dataBlocks:DataBlockWrapper}" IsReadOnly="{Binding Path=ReadOnly}"
                 Text="{Binding Path=Value, Mode=TwoWay, UpdateSourceTrigger=LostFocus}"
                 Style="{StaticResource TextBoxStyle}" />
    </DataTemplate>
    <!-- End Region -->
    <!-- Region Byte -->
    <DataTemplate x:Key="{x:Static local:SharedResources+DataTemplates.ByteDataTemplateKey}">
        <TextBox d:DataContext="{d:DesignInstance dataBlocks:DataBlockWrapper}" IsReadOnly="{Binding Path=ReadOnly}"
                 Text="{Binding Path=Value, Mode=TwoWay, Converter={StaticResource ByteConverter}, UpdateSourceTrigger=LostFocus}"
                 Style="{StaticResource TextBoxStyle}" />

    </DataTemplate>
    <!-- Byte Range -->
    <DataTemplate x:Key="{x:Static local:SharedResources+DataTemplates.ByteFDataTemplateKey}">
        <Grid d:DataContext="{d:DesignInstance dataBlocks:DataBlockWrapper}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="50" />
            </Grid.ColumnDefinitions>
            <Slider Grid.Column="0" Minimum="0" Maximum="1" IsEnabled="{Binding Path=Writeable}"
                    Value="{Binding Path=RangedValue, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                    Style="{StaticResource SliderStyle}" />
            <TextBox Grid.Column="1" IsReadOnly="{Binding Path=ReadOnly}" Margin="5,0,0,0"
                     Text="{Binding Path=Value, Mode=TwoWay, Converter={StaticResource ByteConverter}, UpdateSourceTrigger=LostFocus}"
                     Style="{StaticResource SliderTextBoxStyle}" />
        </Grid>
    </DataTemplate>
    <!-- End Region -->
    <!-- Region Int16 -->
    <DataTemplate x:Key="{x:Static local:SharedResources+DataTemplates.Int16DataTemplateKey}">
        <TextBox d:DataContext="{d:DesignInstance dataBlocks:DataBlockWrapper}" IsReadOnly="{Binding Path=ReadOnly}"
                 Text="{Binding Path=Value, Mode=TwoWay, Converter={StaticResource Int16Converter}, UpdateSourceTrigger=LostFocus}"
                 Style="{StaticResource TextBoxStyle}" />
    </DataTemplate>
    <DataTemplate x:Key="{x:Static local:SharedResources+DataTemplates.Int16FDataTemplateKey}">
        <Grid d:DataContext="{d:DesignInstance dataBlocks:DataBlockWrapper}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="50" />
            </Grid.ColumnDefinitions>
            <Slider Grid.Column="0" Minimum="0" Maximum="1" IsEnabled="{Binding Path=Writeable}"
                    Value="{Binding Path=RangedValue, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                    Style="{StaticResource SliderStyle}" />
            <TextBox Grid.Column="1" IsReadOnly="{Binding Path=ReadOnly}" Margin="5,0,0,0"
                     Text="{Binding Path=Value, Mode=TwoWay, Converter={StaticResource Int16Converter}, UpdateSourceTrigger=LostFocus}"
                     Style="{StaticResource SliderTextBoxStyle}" />
        </Grid>
    </DataTemplate>
    <!-- End Region -->
    <!-- Region Int32 -->
    <DataTemplate x:Key="{x:Static local:SharedResources+DataTemplates.Int32DataTemplateKey}">
        <TextBox d:DataContext="{d:DesignInstance dataBlocks:DataBlockWrapper}" IsReadOnly="{Binding Path=ReadOnly}"
                 Text="{Binding Path=Value, Mode=TwoWay, Converter={StaticResource Int32Converter}, UpdateSourceTrigger=LostFocus}"
                 Style="{StaticResource TextBoxStyle}" />
    </DataTemplate>
    <converters:ThresholdConverter x:Key="ThresholdConverter" />
    <DataTemplate x:Key="{x:Static local:SharedResources+DataTemplates.Int32FDataTemplateKey}">
        <Grid d:DataContext="{d:DesignInstance dataBlocks:DataBlockWrapper}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="50" />
            </Grid.ColumnDefinitions>
            <Slider Grid.Column="0" IsEnabled="{Binding Path=Writeable}" Minimum="0" Maximum="1"
                    Value="{Binding Path=RangedValue, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                    Style="{StaticResource SliderStyle}" />
            <TextBox Grid.Column="1" IsReadOnly="{Binding Path=ReadOnly}" Margin="5,0,0,0"
                     Text="{Binding Path=Value, Mode=TwoWay, Converter={StaticResource Int32Converter}, UpdateSourceTrigger=LostFocus}"
                     Style="{StaticResource SliderTextBoxStyle}" />

        </Grid>
    </DataTemplate>
    <!-- End Region -->
    <!-- Region Enum -->
    <converters:ImageResourceFormatConverter x:Key="ImageResourceFormatConverter" />
    <DataTemplate x:Key="{x:Static local:SharedResources+DataTemplates.EnumDataTemplateKey}">
        <ComboBox d:DataContext="{d:DesignInstance dataBlocks:DataBlockWrapper}" ItemsSource="{Binding Path=EnumData}"
                  IsEnabled="{Binding Path=Writeable}"
                  SelectedValue="{Binding Path=Value, UpdateSourceTrigger=PropertyChanged}" SelectedValuePath="Key"
                  DisplayMemberPath="Value.Value">
            <ComboBox.Style>
                <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}" />
            </ComboBox.Style>
            <ComboBox.ItemTemplate>
                <DataTemplate>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Border x:Name="ImgBorder" BorderThickness="1" BorderBrush="Black" MaxHeight="13" MaxWidth="20"
                                Margin="2,2,5,2" VerticalAlignment="Center" SnapsToDevicePixels="False"
                                UseLayoutRounding="False">
                            <Image x:Name="Img" Stretch="UniformToFill" RenderOptions.BitmapScalingMode="HighQuality"
                                   VerticalAlignment="Center" HorizontalAlignment="Center">
                                <Image.Source>
                                    <MultiBinding Converter="{StaticResource ImageResourceFormatConverter}"
                                                  ConverterParameter="Resources\{0}\{1}.png">
                                        <Binding Path="Value.EnumName" />
                                        <Binding Path="Key" />
                                    </MultiBinding>
                                </Image.Source>
                            </Image>
                        </Border>
                        <TextBlock Grid.Column="1" Text="{Binding Path=Value.Value}" VerticalAlignment="Center" />
                    </Grid>
                    <DataTemplate.Triggers>
                        <Trigger SourceName="Img" Property="Source" Value="{x:Null}">
                            <Setter TargetName="ImgBorder" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </ComboBox.ItemTemplate>
            <ComboBox.ItemContainerStyle>
                <Style TargetType="{x:Type ComboBoxItem}">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                                <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        Background="{TemplateBinding Background}">
                                    <ContentPresenter
                                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                        <ContentPresenter.ContentTemplate>
                                            <DataTemplate>
                                                <Grid>
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="Auto" />
                                                        <ColumnDefinition Width="*" />
                                                    </Grid.ColumnDefinitions>
                                                    <Border x:Name="ImgBorder" BorderThickness="1" BorderBrush="Black"
                                                            Margin="2" VerticalAlignment="Center">
                                                        <Image x:Name="Img" Stretch="None">
                                                            <Image.Source>
                                                                <MultiBinding
                                                                    Converter="{StaticResource ImageResourceFormatConverter}"
                                                                    ConverterParameter="Resources\{0}\{1}.png">
                                                                    <Binding Path="Value.EnumName" />
                                                                    <Binding Path="Key" />
                                                                </MultiBinding>
                                                            </Image.Source>
                                                        </Image>
                                                    </Border>
                                                    <TextBlock Grid.Column="1" Margin="3,0,0,0"
                                                               Text="{Binding Path=Value.Value}"
                                                               VerticalAlignment="Center" />
                                                </Grid>
                                                <DataTemplate.Triggers>
                                                    <Trigger SourceName="Img" Property="Source" Value="{x:Null}">
                                                        <Setter TargetName="ImgBorder" Property="Visibility"
                                                                Value="Collapsed" />
                                                    </Trigger>
                                                </DataTemplate.Triggers>
                                            </DataTemplate>
                                        </ContentPresenter.ContentTemplate>
                                    </ContentPresenter>
                                </Border>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsHighlighted" Value="True">
                                        <Setter TargetName="Bd" Property="Background"
                                                Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                                        <Setter Property="Foreground"
                                                Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                                    </Trigger>
                                    <Trigger Property="IsEnabled" Value="False">
                                        <Setter Property="Foreground"
                                                Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </ComboBox.ItemContainerStyle>
        </ComboBox>
    </DataTemplate>
    <!-- End Region -->
    <!-- Region Boolean -->
    <DataTemplate x:Key="{x:Static local:SharedResources+DataTemplates.BooleanTrueFalseDataTemplateKey}">
        <ToggleButton d:DataContext="{d:DesignInstance dataBlocks:DataBlockWrapper}"
                      IsEnabled="{Binding Path=Writeable}"
                      IsChecked="{Binding Path=Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
            <ToggleButton.Style>
                <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource {x:Type ToggleButton}}">
                    <Setter Property="Content" Value="False" />
                    <Style.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Content" Value="True" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </ToggleButton.Style>
        </ToggleButton>
    </DataTemplate>
    <DataTemplate x:Key="{x:Static local:SharedResources+DataTemplates.BooleanNameDataTemplateKey}">
        <ToggleButton d:DataContext="{d:DesignInstance dataBlocks:DataBlockWrapper}"
                      IsEnabled="{Binding Path=Writeable}"
                      IsChecked="{Binding Path=Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
            <ToggleButton.Style>
                <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource {x:Type ToggleButton}}">
                    <Setter Property="Content" Value="{Binding Path=Name}" />
                </Style>
            </ToggleButton.Style>
        </ToggleButton>
    </DataTemplate>
    <!-- End Region -->
    <!-- Region Color -->
    <DataTemplate x:Key="{x:Static local:SharedResources+DataTemplates.ColorDataTemplateKey}">
        <controls:ColorPicker d:DataContext="{d:DesignInstance dataBlocks:DataBlockWrapper}"
                              IsEnabled="{Binding Path=Writeable}"
                              Color="{Binding Path=Value,Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
            <controls:ColorPicker.Style>
                <Style TargetType="controls:ColorPicker" BasedOn="{StaticResource {x:Type Button}}">
                    <Setter Property="VerticalContentAlignment" Value="Center" />
                </Style>
            </controls:ColorPicker.Style>
        </controls:ColorPicker>
    </DataTemplate>
    <!-- End Region -->
    <!-- End Region -->
</ResourceDictionary>